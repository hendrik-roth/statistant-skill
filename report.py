import os
from io import BytesIO
from secrets import token_hex

import matplotlib.pyplot as plt
import statsmodels.api as sm
from reportlab.graphics import renderPDF
from reportlab.lib.units import cm, mm
from reportlab.pdfgen import canvas
from svglib.svglib import svg2rlg


class ReportGenerator:
    """
    This class represents all operations for handling a file.

    Attributes
    ----------
    filename : str
        name of the file
    output_path : str
        path of the generated report file as String
    """

    def __init__(self, func, filename):
        directory = f"statistant/results/{func}_{filename}_{token_hex(5)}.pdf"
        parent_dir = os.path.expanduser("~")
        self.output_path = os.path.join(parent_dir, directory)
        self.c = canvas.Canvas(self.output_path)

    def create_reg_report(self, model, x_col: list, reg_kind: str):
        """
        function for creating a report for regressions

        Parameters
        ----------
        reg_kind
            regression kind (linear||logistic) regression
        x_col
            list with column names of x
        model
            model of regression plots
        """
        c = self.c

        # draw title
        c.setFont('Helvetica-Bold', 20)
        title = f"{reg_kind.title()} summary"
        c.setTitle(title)
        c.drawString(cm, 750, title)

        # draw description
        description = "Generated by Mycroft Statistant-Skill."
        c.setFont('Helvetica', 11)
        c.drawString(cm, 700, description)

        # summary on bottom of reg plots (page 1)
        summary = model.summary().as_text()
        text_object = c.beginText(cm, 600)
        for line in summary.splitlines(False):
            text_object.textLine(line.rstrip())
        c.setFont('Helvetica', 14)
        c.drawText(text_object)
        page_number = 1
        self.draw_page_number(page_number)
        c.showPage()

        # generate each regression plot per page
        for page, x in enumerate(x_col):
            # plot regression
            fig = plt.figure(figsize=(6, 5))
            sm.graphics.plot_regress_exog(model, x, fig=fig)
            fig.tight_layout(pad=1.0)

            # save plot for report
            img_data = BytesIO()
            fig.savefig(img_data, format='svg')
            plt.clf()
            img_data.seek(0)  # rewind the data
            drawing = svg2rlg(img_data)  # convert svg to drawing

            # Regression plots at first half page
            renderPDF.draw(drawing, c, 10, 350)
            page_number += 1
            self.draw_page_number(page_number)
            c.showPage()

        c.save()

    def draw_page_number(self, page_count):
        self.c.setFont("Helvetica", 9)
        self.c.drawRightString(200 * mm, 20 * mm,
                               f"{page_count}")
